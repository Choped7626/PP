choped@Talenel:~$ ocaml
        OCaml version 4.13.1

# 
    type person = {name : string ; age : int};;  
type person = { name : string; age : int; }
# let p1 = {name = "Pepe" ; age = 49};;
val p1 : person = {name = "Pepe"; age = 49}
# let p2 = {age = 19 ; name = "Rosa"};;
val p2 : person = {name = "Rosa"; age = 19}
# p2.name;;
- : string = "Rosa"
# p2.age ;;
- : int = 19
# p1.age < p2.age;;
- : bool = false
# 
    let older p =
        {name = p.name ; age = succ p.age};;    
val older : person -> person = <fun>
# older p1;;
- : person = {name = "Pepe"; age = 50}
#    let older p =
        {name = p.name ; age = succ p.age};; 
    (*hacen lo mismo*)
#     (*hacen lo mismo*)ame = n ; age = a) =
      let olderSINpunto (name = n ; age = a) = : person -> person = <fun>
          (name = n ; age = succ a);;
Error: Syntax error: ')' expected
Line 2, characters 22-23:   This '(' might be unmatched
#     let olderSINpunto (name = n ; age = a) =
          (name = n ; age = succ a);;
Error: Syntax error: ')' expected
Line 1, characters 22-23:   This '(' might be unmatched
#     let older p =
        {name = p.name ; age = succ p.age};; 
    (*hacen lo mismo*)
#     (*hacen lo mismo*)ame = n ; age = a) =
      let olderSINpunto (name = n ; age = a) = : person -> person = <fun>
          {name = n ; age = succ a};;
Error: Syntax error: ')' expected
Line 2, characters 22-23:   This '(' might be unmatched
#     let older p =
        {name = p.name ; age = succ p.age};; 
    (*hacen lo mismo*)
    let olderSINpunto {name = n ; age = a} =
        {name = n ; age = succ a};;  val older : person -> person = <fun>
#     
val olderSINpunto : person -> person = <fun>
#     let older p =
        {name = p.name ; age = succ p.age};; 
    (*hacen lo mismo*)
    let olderSINpunto {name = n ; age = a} =
        {name = n ; age = succ a};;

    let olderSalvo p =
        {p with age = succ p.age};;  val older : person -> person = <fun>
#     val olderSINpunto : person -> person = <fun>
#     
val olderSalvo : person -> person = <fun>
#     type person = {name : string ; mutable age : int};;
type person = { name : string; mutable age : int; }
# older p2;;
- : person/2 = {name = "Rosa"; age = 20}
# let p1 = {name = "Pepe" ; age = 49};;                                     
val p1 : person = {name = "Pepe"; age = 49}
# let p2 = {age = 19 ; name = "Rosa"};;
val p2 : person = {name = "Rosa"; age = 19}
# p1;;
- : person = {name = "Pepe"; age = 49}
# p2;;
- : person = {name = "Rosa"; age = 19}
#     (*p with age = significa un registro con todo igual a p salvo el campo a la derecha de with q cambiarÃ¡*)
    let olderSalvo p =
        {p with age = succ p.age};;    
val olderSalvo : person -> person = <fun>
# p1.age <- 18;;
- : unit = ()
# p1;;
- : person = {name = "Pepe"; age = 18}
# 
    let aged p = 
        p.age <- succ p.age;;    
val aged : person -> unit = <fun>
# aged p1;;
- : unit = ()
# p1;;
- : person = {name = "Pepe"; age = 19}
#     type 'a var = {mutable valor : 'a};;
type 'a var = { mutable valor : 'a; }
# {valor = 0};;
- : int var = {valor = 0}
# {valor = p1};;
- : person var = {valor = {name = "Pepe"; age = 19}}
#     let initvar x = {valor = x};;
val initvar : 'a -> 'a var = <fun>
# initvar 5;;
- : int var = {valor = 5}
# let n = initvar 3;;
val n : int var = {valor = 3}
#     let (!!) v = v.valor;;
val ( !! ) : 'a var -> 'a = <fun>
# !!n;;
- : int = 3
#     let (<<) v x = v.valor <- x;;
val ( << ) : 'a var -> 'a -> unit = <fun>
# n<<5;;
- : unit = ()
# n;;
- : int var = {valor = 5}
# n << 35
  ;;
- : unit = ()
# n;;
- : int var = {valor = 35}
# module Contador : sig
    val next : unit -> int
    val reset : unit -> unit
end = struct
    let n = ref 0
    let next() = 
        n := !n +1;
        !n
    let reset() =
        n := 0
end                    
  ;;
module Contador : sig val next : unit -> int val reset : unit -> unit end
# Contador.next();;
- : int = 1
# Contador.next();;
- : int = 2
# module Fruta = Contador ();;
Error: The functor application is ill-typed.
       These arguments:
         ()
       do not match these parameters:
         functor  -> ...
       The following extra argument is provided ()
# 
module Contador : sig
    val next : unit -> int
    val reset : unit -> unit
end = struct
    let n = ref 0
    let next() = 
        n := !n +1;
        !n
    let reset() =
        n := 0
end;;                      
module Contador : sig val next : unit -> int val reset : unit -> unit end
# module Contador : sig
val next : unit -> int
val reset : unit -> unit
end = struct
    let n = ref 0

    let next () = 
        let _ = n := !n + 1 in
        !n

    let reset () = n := 0
end                        
  ;;
module Contador : sig val next : unit -> int val reset : unit -> unit end
# module Fruta = Contador;;
module Fruta = Contador
# Fruta.next;;
- : unit -> int = <fun>
# Fruta.next();;
- : int = 1
# module Carbe = Contador ;;
module Carbe = Contador
# Carne.next();;
Error: Unbound module Carne
Hint: Did you mean Carbe?
# Carbe.next();;
- : int = 2
# module Contador () : sig
    val next : unit -> int
    val reset : unit -> unit
end = struct
    let n = ref 0
    let next() = 
        n := !n +1;
        !n
    let reset() =
        n := 0
end;;
                    module Contador :
  functor () -> sig val next : unit -> int val reset : unit -> unit end
# 
  module Carne = Contador();;
module Carne : sig val next : unit -> int val reset : unit -> unit end
# module Fruta = Contador();;
module Fruta : sig val next : unit -> int val reset : unit -> unit end
# 


